name: Build # The name of the pipeline
on: # When the pipeline will run
    push: # The pipeline will run whenever new code is pushed on every branch
    pull_request: # The pipeline will also run whenever a pull request is made

jobs:
  gradle: # The name of the job in the pipeline
    runs-on: ubuntu-latest # The virtual machine Operating System that will run the pipeline

    services: # Services that will run alongside the pipeline
      postgres: # Database
        image: postgres # Using the "postgres" image
        env:
          POSTGRES_PASSWORD: postgres # Set the password for the database
        options: >- # Set health checks to wait until postgres has started
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps: # The steps that the pipeline will take
    - name: Clone/checkout repository # Clones the GitHub Repository code onto the virtual machine
      uses: actions/checkout@v3 # Using the actions/checkout template

    - name: Setup Java # Sets up and installs Java on the virtual machine
      uses: actions/setup-java@v3 # Using the actions/setup-java template
      with:
        java-version: '17' # Use Java 17
        distribution: 'adopt' # Use the Adopt version of Java

    - name: Setup Gradle # Sets up and installs Gradle on the virtual machine
      uses: gradle/gradle-build-action@v2 # Using the gradle/gradle-build-action template

    - name: Chmod Gradlew # Changes the permissions of the Gradle wrapper
      run: chmod +x gradlew # Allows the Gradle wrapper to be executed

    - name: Set env vars # Not needed on GitHub Actions
      run: rm -f .env

    - name: Run Unit Tests
      run: ./gradlew test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Execute Gradle build
      run: ./gradlew build
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT # Runs a command on the virtual machine to extract the branch name and store it in a variable

    - name: Upload build artifacts # Uploads the build artifacts to GitHub
      uses: actions/upload-artifact@v3 # Using the actions/upload-artifact template
      with:
        # Use the name of the branch
        name: onionspring-${{ steps.extract_branch.outputs.branch }} # The name of the build artifact
        path: build/libs/app-0.0.1-SNAPSHOT.jar # The path to the build artifact
